import React, { useEffect, useState } from "react";
import classnames from 'classnames';
import {
  Row,
  Col,
  Modal,
  ModalHeader, 
  ModalBody, 
  TabContent, 
  TabPane,
  Nav, 
  NavItem, 
  NavLink
} from "reactstrap";
import Widget from "../../components/Widget";
import Todo from "../components/todo";
import ps from "./Product.module.scss";

import BootstrapTable from 'react-bootstrap-table-next';
import ToolkitProvider, { Search } from 'react-bootstrap-table2-toolkit';
import paginationFactory from 'react-bootstrap-table2-paginator';
import filterFactory, { textFilter } from 'react-bootstrap-table2-filter';
import Login from '../login';
import { load,vulnerabilities,save_product,delete_product,load_product } from '../../reducers/productSlice';
import { connect } from 'react-redux';

const Product = (props) => {

  const { SearchBar, ClearSearchButton } = Search;

  const [modalShow, setModalShow] = useState(false);

  const [activeTab, setActiveTab] = useState('1');

  // const [products, setProducts] = useState([]);

  const [tabData, setTabData] = useState(["Hello World"]);
  const [render, setRender] = useState(true);

  const handleModalClose = () => setModalShow(false);

  const changeTab = tab => {
    if(activeTab !== tab) setActiveTab(tab);
  }

 // const [todos, setTodos] = useState(    [    ]  );


  var cid = Login.isAuthenticated(localStorage.getItem('authenticated')).clid; //TODO: get clid from cookie
  //setTodos(props.my_products);
  const vul_columns = [
    {
      dataField: 'cve',
      text: 'CVE',
      filter: textFilter()
    }, 
    {
      dataField: 'Source',
      text: 'Source',
      filter:textFilter()

    }, 
    {
      dataField: 'description',
      text: 'Description',
      filter:textFilter()

    },
    {
      dataField:"tag",
      text:"TAG",
      filter:textFilter()
    }

  ];
  const columns = [
    {
      dataField: '_id',
      text: 'id',
      hidden: true
    }, 
    {
      dataField: 'name',
      text: 'Product'
    }, 
    {
      dataField: 'vendor',
      text: 'Vendor'
    }
  ];

  const products = [
    {
      name: 1,
      vendor: 'Item name 0',
      latestVersion: '2100'
    },
    
  ];

  const addProduct = () => {
        
    // getProductListForModal()

    //setProducts();
    
    setModalShow(true);
  }

  const getProductData = (pro) => {
    console.log("get product data: "+ pro);
    props.get_vulnerabilities(pro);
    setTabData(pro);
  }
  const deleteProduct = (pro) => {
    console.log("delete product: "+ pro);
    //const td = todos;
    //td = td.filter(val => val !== "pro");
    //setTodos(td);
    props.delete_product(pro);
    setRender(true);

    //setTabData(pro);
  }
  const rowEvents = {
    onClick: (e, row, rowIndex) => {
      var product = {vendor:row.vendor,name:row.name};
      console.log(JSON.stringify(product));
      console.log("let save product ");

      props.save_product(cid,product);
      //setTodos([...todos, { text: row.name}]);
      setRender(true);

    }
  };

  useEffect(() => {
    if(render){
      props.load();
      props.load_product(cid);
      setRender(false);
    }

  });
 
  return (
    <div>
      <Row>
        <Col lg={3} md={3} sm={3}>
          <h1> Products </h1>
          <Widget>
            <div className="todo-list">
              {props.my_products.map((todo, index) => (
                <Todo
                  key={index}
                  index={index}
                  text={todo.name}
                  selectProduct={getProductData}
                  deleteProduct={deleteProduct}
                />
              ))}
            </div>
            <button className={ps.add_product_btn} onClick={addProduct}>Add</button>
          </Widget>
        </Col>
        <Col lg={9} md={9} sm={9}>
          <Nav tabs>
            <NavItem>
              <NavLink
                className={classnames({ active: activeTab === '1' })}
                onClick={() => { changeTab('1'); }}
              >
                Details
              </NavLink>
            </NavItem>
            <NavItem>
              <NavLink
                className={classnames({ active: activeTab === '2' })}
                onClick={() => { changeTab('2'); }}
              >
                Vulnerability
              </NavLink>
            </NavItem>
          </Nav>
          <TabContent activeTab={activeTab}>
            <TabPane tabId="1">{tabData}</TabPane>
            <TabPane tabId="2">

                <ToolkitProvider
                    keyField="id"
                    data={ props.vulnerabilities }
                    columns={ vul_columns }
                    search
                  >
                    {
                      props => (
                        <div>
                          <SearchBar { ...props.searchProps }  />
                          <ClearSearchButton { ...props.searchProps } /> 
                          <hr />
                          <BootstrapTable
                            { ...props.baseProps }
                            pagination={ paginationFactory() }
                            filter={ filterFactory() }
                            bootstrap4 
                            keyField='cve'
                            striped
                            hover
                          />
                        </div>
                      )
                    }
                  </ToolkitProvider>
            </TabPane>
          </TabContent>
        </Col>
      </Row>
      <Modal isOpen={modalShow} toggle={handleModalClose} >
        <ModalHeader toggle={handleModalClose}>Products List</ModalHeader>
        <ModalBody>
          <ToolkitProvider
            keyField="_id"
            data={ props.products }
            columns={ columns }
            search
          >
            {
              props => (
                <div>
                  <SearchBar { ...props.searchProps } />
                  <hr />
                  <BootstrapTable
                    { ...props.baseProps }
                    pagination={ paginationFactory() }
                    rowEvents={ rowEvents }
                    bootstrap4 
                    keyField='id'
                    striped
                    hover
                  />
                </div>
              )
            }
          </ToolkitProvider>
        </ModalBody>
      </Modal>
    </div>
  );
};

function mapStateToProps(state) {
  return {
    loading: state.product.loading,
    products: state.product.products,
    paginationOption: state.product.paginationOption,
    vulnerabilities: state.product.vuls,
    my_products: state.product.my_products,
  };
}
const mapDispatchToProps = (dispatch) => {
  return {
    // dispatching plain actions
    load: () => dispatch(load()),
    get_vulnerabilities: (pro)=>dispatch(vulnerabilities(pro)),
    save_product: (clid,product)=>dispatch(save_product(clid,product)),
    delete_product:(clid,product)=>dispatch(delete_product(clid,product)),
    load_product:(clid)=>dispatch(load_product(clid))
  }
}
export default connect(mapStateToProps,mapDispatchToProps)(Product);
