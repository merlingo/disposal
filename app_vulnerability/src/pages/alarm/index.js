import React, { useEffect, useState } from "react";
import {
  Row,
  Col,
} from "reactstrap";
import { Tabs, Tab, TabPanel, TabList } from 'react-web-tabs';
import Select from 'react-select';
import 'react-web-tabs/dist/react-web-tabs.css';
import as from "./Alarm.module.scss";

import BootstrapTable from 'react-bootstrap-table-next';
import ToolkitProvider, { Search } from 'react-bootstrap-table2-toolkit';
import paginationFactory from 'react-bootstrap-table2-paginator';
import filterFactory, { textFilter } from 'react-bootstrap-table2-filter';
import { save_option, load_alarms, load_options } from '../../reducers/alarmSlice';
import { connect } from 'react-redux';

const Alarm = (props) => {

    const [todos, setTodos] = useState(
        [
            { text: "Learn about React" },
            { text: "Meet friend for lunch" },
            { text: "Build really cool todo app" }
        ]
    );

    const [selVendor, setSelVendor] = useState('');
    const [selProduct, setSelProduct] = useState('');
    const [selVul, setSelVul] = useState('');

    const [curVendor, setCurVendors] = useState([
        'Microsoft',
        'Apple',
        'iPhone'
    ]);

    const [curProduct, setCurProduct] = useState([
        'Microsoft',
        'Apple',
        'iPhone'
    ]);

    const [curVulnerability, setCurVulnerability] = useState([
        'Microsoft',
        'Apple',
        'iPhone'
    ]);
    
    const [vendors, setVendors] = useState(
        [
            { label: "MicroSoft", value: 355 },
            { label: "Apple", value: 54 },
            { label: "Unix", value: 43 },
        ]
    );

    const [product, setProduct] = useState(
        [
            { label: "Office", value: 355 },
            { label: "Edge", value: 54 },
            { label: "Azure", value: 43 },
        ]
    );

    const [vulnerability, setVulnerability] = useState(
        [
            { label: "RCE", value: 355 },
            { label: "XSS", value: 54 },
            { label: "SQL Injection", value: 43 },
        ]
    );

  const columns = [
    {
      dataField: 'id',
      text: 'ID',
      filter: textFilter()

    }, 
    {
      dataField: 'name',
      text: 'Name',
      filter: textFilter()

    }, 
    {
      dataField: 'rule',
      text: 'Rule',
      filter: textFilter()

    },
    {
      dataField: 'date',
      text: 'Date',
      filter: textFilter()

    }
  ];

  const alarms = [
  
  ];

  const rowEvents = {
    onClick: (e, row, rowIndex) => {
        setTodos([...todos, { text: row.name}]);
    }
  };

  const saveAlarms = () => {
    setCurVendors([...curVendor, selVendor])
    setCurProduct([...curProduct, selProduct])
    setCurVulnerability([...curVulnerability, selVul])
    setSelVendor('')
    setSelProduct('')
    setSelVul('')
  }

  const handleChangeVendor = (selectedOptions) => {
    setSelVendor(selectedOptions.label);
  }

  const handleChangeProduct = (selectedOptions) => {
    setSelProduct(selectedOptions.label);
  }

  const handleChangeVulnerability = (selectedOptions) => {
    setSelVul(selectedOptions.label);
  }

  useEffect(() => {
  });
 
  return (
    <div>
        <Row>
            <Tabs defaultTab="vertical-tab-one" vertical className={as.tabs}>
                <Col lg={3} md={3} sm={3}>
                    <TabList>
                        <Tab tabFor="vertical-tab-one" className={as.tab_name}>Alarms</Tab>
                        <Tab tabFor="vertical-tab-two" className={as.tab_name}>Options</Tab>
                    </TabList>
                </Col>
                <Col lg={9} md={9} sm={9}>
                    <TabPanel tabId="vertical-tab-one">
                        <ToolkitProvider
                            keyField="id"
                            data={ props.alarms }
                            columns={ columns }
                            search
                        >
                        {
                            props => (
                                <div>
                                    <BootstrapTable
                                        { ...props.baseProps }
                                        pagination={ paginationFactory() }
                                        rowEvents={ rowEvents }
                                        filter={ filterFactory() }
                                        bootstrap4 
                                        keyField='id'
                                        striped
                                        hover
                                    />
                                </div>
                            )
                        }
                        </ToolkitProvider>
                    </TabPanel>
                    <TabPanel tabId="vertical-tab-two">
                        <Row>
                            <Col lg={4} md={4} sm={4}>
                                <label><h3>Vendor</h3></label>
                                <ul>
                                {
                                    curVendor.map((index, key) =>
                                        <li key={key}>{index}</li>
                                    )
                                }
                                </ul>
                            </Col>
                            <Col lg={4} md={4} sm={4}>
                                <label><h3>Product</h3></label>
                                <ul>
                                {
                                    curProduct.map((index, key) =>
                                        <li key={key}>{index}</li>
                                    )
                                }
                                </ul>
                            </Col>
                            <Col lg={4} md={4} sm={4}>
                                <label><h3>Vulnerability</h3></label>
                                <ul>
                                {
                                    curVulnerability.map((index, key) =>
                                        <li key={key}>{index}</li>
                                    )
                                }
                                </ul>
                            </Col>
                        </Row>
                        <hr/>
                        <Row>
                            <Col lg={4} md={4} sm={4}>
                                <label>Vendors:</label>
                                <Select options={vendors} className={as.select} onChange={handleChangeVendor} />
                            </Col>
                            <Col lg={4} md={4} sm={4}>
                                <label>Products:</label>
                                <Select options={product} className={as.select} onChange={handleChangeProduct} />
                            </Col>
                            <Col lg={4} md={4} sm={4}>
                                <label>Vulnerability:</label>
                                <Select options={vulnerability} className={as.select}  onChange={handleChangeVulnerability} />
                            </Col>
                        </Row>
                        <button onClick={saveAlarms} className={`btn btn-primary ${as.save_btn}`}>Save</button>
                    </TabPanel>

                </Col>
            </Tabs>
        </Row>
    </div>
  );
};
function mapStateToProps(state) {
  return {
    alarm_loading:state.alarm.alarm_loading,
    option_loading:state.alarm.option_loading,
    alarms: state.alarm.alarms,
    vendors:state.alarm.vendors,
    products:state.alarm.products,
    vuls:state.alarm.vuls,
    selectedVuls:state.alarm.selectedVuls,

  };
}
const mapDispatchToProps = (dispatch) => {
  return {
    // dispatching plain actions save_option, load_alarms, load_options
    save_option: (option) => dispatch(save_option(option)),
    load_alarms: ()=>dispatch(load_alarms()),
    load_options: ()=>dispatch(load_options()),

  }
}
export default connect(mapStateToProps,mapDispatchToProps)(Alarm);
