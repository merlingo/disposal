import { createSlice } from '@reduxjs/toolkit';
import {authHeader} from '../pages/login';
export const slice = createSlice({
  name: 'vulnerability',
  initialState: {
    loading:false,
    products : [
        {
          cve: 1,
          source: 'Item name 0',
          desc: '2100'
        }
      ],
    paginationOption:{},
  },
  reducers: {
    load:{
        reducer: (state) => {
            // Redux Toolkit allows us to write "mutating" logic in reducers. It
            // doesn't actually mutate the state because it uses the immer library,
            // which detects changes to a "draft state" and produces a brand new
            // immutable state based off those changes
            state.loading = true;
            //state.products=action.payload.email;

            console.log("reducers vulnerability load reducer:");
          },
        prepare: () =>{
            console.log("action vulnerability load prepare:");
            return {
                payload:{
                    request: {
                        url: "/webapi/vulnerability/",
                        headers: authHeader() ,
                        method: 'GET',
                      }
                }
            }
        }
    } ,
    load_SUCCESS: (state,action) => {
      state.products = action.payload.data;
      state.loading=false;
      console.log("reducers vulnerability load_SUCCESS:"+JSON.stringify(state.products));

    },
    load_FAILURE: (state, action) => {
      state.value += action.payload;
      console.log("reducers vulnerability load_FAILURE:");

    },
  },
});

export const { load, load_FAILURE, load_SUCCESS } = slice.actions;

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched


// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state) => state.counter.value)`

export default slice.reducer;
