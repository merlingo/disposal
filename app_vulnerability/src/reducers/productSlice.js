import { createSlice } from '@reduxjs/toolkit';
import {authHeader} from '../pages/login';

export const slice = createSlice({
  name: 'product',
  initialState: {
    loading:false,
    products : [
        {
          cve: 1,
          source: 'Item name 0',
          desc: '2100'
        }
      ],
    paginationOption:{},
    vuls:[],
  },
  reducers: {
    load:{
        reducer: (state) => {
            // Redux Toolkit allows us to write "mutating" logic in reducers. It
            // doesn't actually mutate the state because it uses the immer library,
            // which detects changes to a "draft state" and produces a brand new
            // immutable state based off those changes
            state.loading = true;
            //state.products=action.payload.email;

            console.log("reducers vulnerability load reducer:");
          },
        prepare: () =>{
            console.log("action vulnerability load prepare:");
            return {
                payload:{
                    request: {
                        url: "/webapi/product/",
                        headers: authHeader() ,

                        method: 'GET',
                      }
                }
            }
        }
    } ,
    load_SUCCESS: (state,action) => {
      state.products = action.payload.data;
      state.loading=false;
      console.log("reducers vulnerability load_SUCCESS:"+JSON.stringify(state.products));

    },
    load_FAIL: (state, action) => {
      state.value = action.payload;
      console.log("reducers vulnerability load_FAILURE:");

    },
    load_product:{
      reducer: (state) => {
          // Redux Toolkit allows us to write "mutating" logic in reducers. It
          // doesn't actually mutate the state because it uses the immer library,
          // which detects changes to a "draft state" and produces a brand new
          // immutable state based off those changes
          state.loading = true;
          //state.products=action.payload.email;

          console.log("reducers vulnerability load_product reducer:");
        },
      prepare: (cid) =>{
          console.log("action vulnerability load_product prepare:"+cid);
          return {
              payload:{
                  request: {
                      url: "/webapi/product/"+cid,
                      method: 'GET',
                      headers: authHeader() ,
                    }
              }
          }
      }
  } ,
  load_product_SUCCESS: (state,action) => {
    state.my_products = action.payload.data;
    state.loading=false;
    console.log("reducers vulnerability load_product_SUCCESS:"+JSON.stringify(state.products));

  },
  load_product_FAIL: (state, action) => {
    state.value = action.payload;
    console.log("reducers vulnerability load_product_FAIL:");

  },
  delete_product:{
    reducer: (state) => {
        // Redux Toolkit allows us to write "mutating" logic in reducers. It
        // doesn't actually mutate the state because it uses the immer library,
        // which detects changes to a "draft state" and produces a brand new
        // immutable state based off those changes
        state.loading = true;
        //state.products=action.payload.email;

        console.log("reducers vulnerability delete_product reducer:");
      },
    prepare: (cid, product) =>{
        console.log("action vulnerability delete_product prepare:"+cid);
        return {
            payload:{
                request: {
                    url: "/webapi/product/"+cid,
                    method: 'DELETE',
                    headers: authHeader() ,
                    data: product,
                  }
            }
        }
    }
} ,
delete_product_SUCCESS: (state,action) => {
  state.my_products = action.payload.data;
  state.loading=false;
  console.log("reducers vulnerability delete_product_SUCCESS:"+JSON.stringify(state.products));

},
delete_product_FAIL: (state, action) => {
  state.value = action.payload;
  console.log("reducers vulnerability delete_product_FAIL:");

},
    save_product:{
      reducer: (state) => {
          // Redux Toolkit allows us to write "mutating" logic in reducers. It
          // doesn't actually mutate the state because it uses the immer library,
          // which detects changes to a "draft state" and produces a brand new
          // immutable state based off those changes
          state.loading = true;
          //state.products=action.payload.email;

          console.log("reducers vulnerability load reducer:");
        },
      prepare: (cid, product) =>{
          console.log("action vulnerability save_product prepare:"+cid);
          return {
              payload:{
                  request: {
                      url: "/webapi/product/"+cid,
                      method: 'POST',
                      headers: authHeader() ,
                      data: product,
                    }
              }
          }
      }
  } ,
  save_product_SUCCESS: (state,action) => {
    state.products = action.payload.data;
    state.loading=false;
    console.log("reducers vulnerability save_product_SUCCESS:"+JSON.stringify(state.products));

  },
  save_product_FAIL: (state, action) => {
    state.value = action.payload;
    console.log("reducers vulnerability save_product_FAILURE:");

  },
    vulnerabilities:{
        reducer: (state) => {
            // Redux Toolkit allows us to write "mutating" logic in reducers. It
            // doesn't actually mutate the state because it uses the immer library,
            // which detects changes to a "draft state" and produces a brand new
            // immutable state based off those changes
            state.loading = true;
            //state.products=action.payload.email;

            console.log("reducers product load reducer:");
          },
        prepare: (product) =>{
            console.log("action product vulnerabilities prepare:");
            return {
                payload:{
                    request: {
                        url: "/webapi/product/vuls?p="+product,
                        headers: authHeader() ,
                        method: 'GET',
                      }
                }
            }
        }
    },
        vulnerabilities_SUCCESS: (state,action) => {
            state.vuls = action.payload.data ==""?[]:action.payload.data;
            state.loading=false;
            console.log("reducers vulnerability load_SUCCESS:"+JSON.stringify(state.vuls));
      
          },
          vulnerabilities_FAIL: (state, action) => {
            state.value = action.payload;
            console.log("reducers vulnerability load_FAILURE:");
      
          }, 
  },
});

export const { load, load_FAIL, load_SUCCESS,vulnerabilities, vulnerabilities_SUCCESS,vulnerabilities_FAIL, save_product,save_product_SUCCESS,save_product_FAIL,
  delete_product,load_product,delete_product_SUCCESS,delete_product_FAIL,load_product_SUCCESS,load_product_FAIL} = slice.actions;

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched


// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state) => state.counter.value)`

export default slice.reducer;
